/*
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
*/

import std.stdio;

// Constructs a list of fibonnaci numbers with values under a given max
int[] fib_up_to(int max) {
    int[] result = [1, 1];  //initialize with first two numbers in sequence
    int next = 2;
    while(next <= max) {
        result ~= next;
        next = result[$ - 1] + result[$ - 2];
    }

    return result;
}

// Testing fib_up_to()
unittest {
    // Simple test to start off with
    auto upto10 = fib_up_to(10);
    assert(upto10 == [1, 1, 2, 3, 5, 8]);
    // Base case of max=1; should return the initial list of [1, 1]
    auto upto1 = fib_up_to(1);
    assert(upto1 == [1, 1]);
    // Testing with an exact fibonacci number as max; max *should* be included in result
    auto upto8 = fib_up_to(8);
    assert(upto8 == [1, 1, 2, 3, 5, 8]);
}

void main() {
    auto under4m = fib_up_to(4_000_000);

    /* Even numbers are regularly spaced in the Fibonacci sequence
       (Odd, Odd, Even, Odd, Odd, Even, Odd, Odd, Even, ...)
       so we could probably do this sum without doing % 2 on each 
       number--but this works well enough
    */
    int sum = 0;
    foreach(n; under4m) {
        if (n % 2 == 0) {
            sum += n;
        }
    }

    writefln("Sum of even Fibonacci numbers under 4 million is %s", sum);
}
