{-  Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    find the sum of the even-valued terms.
-}

fib :: (Eq a, Num a, Num p) => a -> p
fib n | n == 1    = 1
      | n == 2    = 1
      | otherwise = fib (n - 1) + fib (n - 2)

fibs :: [Integer]
fibs = map fib [1..]

-- More efficient definition of fibs; avoids exponential recursive calls
fibs' :: [Integer]
fibs' = 1 : 1 : zipWith (+) fibs' (tail fibs')

maxterm :: Integer
maxterm = 4000000

result :: Integer
result = sum [x | x <- (takeWhile (< maxterm) fibs'), x `mod` 2 == 0]

main :: IO ()
main = putStrLn ("Sum of even-valued Fibonacci terms under 4 million = " ++ show (result))